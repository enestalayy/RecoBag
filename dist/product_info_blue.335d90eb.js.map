{"mappings":"AAcE,CAAA,SAAS,CAAC,EAAE;IACV,EAAE,EAAE,CAAC,UAAU,GAAG,SAAS,QAAQ,EAAE;QACjC,IAAI,aAAa,IAAI,EACjB,QAAQ,EAAE,MAAK,IAAI,GACnB,UAAU,GACV,MAAM,GACN,UAAU,GACV,gBAAgB,GAChB,OAAO,GACP,WACA,YAAyB,kEAAkE;QAE/F,0HAA0H;QAC1H,MAAM,QAAQ,CAAC,cAAc,IAAI,CAAC;QAClC,0DAA0D;QAC1D,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE;QAElD,0FAA0F;QAC1F,IAAG,SAAS,WAAW,KAAK,YACxB,aAAa;YAAC,eAAgB;YAAe,SAAS;YAAO,SAAS;QAAO;aAE7E,aAAa;YAAC,eAAgB;YAAc,SAAS;YAAQ,SAAS;QAAc;QAExF,oCAAoC;QACpC,EAAE,MAAK,OAAO,GAAG,CAAC;YAAC,SAAS,WAAW,OAAO;QAAA;QAE9C,sCAAsC;QACtC,IAAI,gBAAgB,SAAS,KAAK,EAAC,GAAG,EAAE;YACpC,MAAM,IAAI,CAAC,yCAAwC,SAAS,GAAG,EAAE;gBAC7D,IAAI,IAAI,IAAI,KAAG,aAAa,IAAI,IAAI,KAAG,YAAY,UAAU;qBACxD,UAAU;gBACf,OAAO,KAAK;YAChB;QACJ;QAEA,mBAAmB;QACnB,cAAc,SAAS,OAAO,EAAC;QAC/B,cAAc,SAAS,OAAO,EAAC;QAE/B,uDAAuD;QACvD,YAAY,WAAW,aAAa;QAEpC,oEAAoE;QACpE,8BAA8B;QAC9B,IAAI,UAAU,WAAW;YACrB,IAAI;YAEJ,iFAAiF;YACjF,IAAI,CAAC,WAAW,QAAQ,WAAW,kBAAkB,UAAU,CAAC,UAAU,IAAK;gBAC3E;gBACA,IAAI,OAAK,KAAK;YAClB,OAAM;gBACD,8DAA8D;gBAC/D,gBAAgB,UAAU,CAAC,UAAU;gBACrC,OAAO;YACX,CAAC;YAED,0BAA0B;YAC1B,WAAW,SAAS,QAAQ,GAAG;YAE/B,oCAAoC;YACpC,yFAAyF;YACzF,SAAS,gBAAgB,KAAK,CAAC,UAAU;YAGzC,qCAAqC;YACrC,IAAI,SAAS,GAAG,SAAS;YACzB,yDAAyD;YACzD,IAAI,UAAU,QAAQ,UAAU;YAChC,4DAA4D;YAC5D,IAAI,UAAQ,GAAG,UAAU;YAEzB,oDAAoD;YACpD,IAAI,YAAY,QAAQ,SAAS,OAAO,CAAC,QAAQ,CAAC;iBAC7C,SAAS,OAAO,CAAC,WAAW,CAAC;YAClC,IAAI,YAAY,GAAG,SAAS,OAAO,CAAC,QAAQ,CAAC;iBACxC,SAAS,OAAO,CAAC,WAAW,CAAC;YAElC,gEAAgE;YAChE,OAAO,AAAC,CAAA,UAAU,GAAE,IAAK,SAAS,MAAM;YAExC,wEAAwE;YACxE,8EAA8E;YAC9E,IAAI,KAAK,GAAG,CAAC,UAAQ,OAAK,OAAO,MAAM;YAEvC,MAAM,GAAG,CAAC,WAAW,OAAO,EAAE,KAAK,KAAK,CAAC;QAC7C;QAEA,YAAY,WAAU;YAClB;QACJ,GAAE,OAAK;IACX;IAEA,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,GAAG;QACvB,aAAgB;QAChB,QAAgB;QAChB,UAAgB;QAChB,SAAW,IAAI;QACf,SAAY,IAAI,CAAgB,yCAAyC;IAC7E;AAEJ,CAAA,EAAG","sources":["src/dependancy/thumbelina.js"],"sourcesContent":["/*\n    Thumbelina Content Slider\n    V1.0 Rev 1302190900\n\n    A lightweight horizontal and vertical content slider designed for image thumbnails.\n    http://www.starplugins.com/thumbelina\n\n    Developed by Star Plugins\n    http://www.starplugins.com\n\n    Copyright 2013, Star Plugins, www.starplugins.com\n    License: GNU General Public License, version 3 (GPL-3.0)\n    http://www.opensource.org/licenses/gpl-3.0.html\n*/\n;(function($) {\n    $.fn.Thumbelina = function(settings) {\n        var $container = this,      // Handy reference to container.\n            $list = $('ul',this),   // Handy reference to the list element.\n            moveDir = 0,            // Current direction of movement.\n            pos = 0,                // Current actual position.\n            destPos = 0,            // Current destination position.\n            listDimension = 0,      // Size (width or height depending on orientation) of list element.\n            idle = 0,\n            outerFunc,\n            orientData;              // Stores function calls and CSS attribute for horiz or vert mode.\n        \n        // Add thumblina CSS class, and create an inner wrapping container, within which the list will slide with overflow hidden.\n        $list.addClass('thumbelina').wrap('<div style=\"position:absolute;overflow:hidden;width:100%;height:100%;\">');\n        // Create settings by merging user settings into defaults.\n        settings = $.extend({}, $.fn.Thumbelina.defaults, settings);\n        \n        // Depending on vertical or horizontal, get functions to call and CSS attribute to change.\n        if(settings.orientation === 'vertical') \n            orientData = {outerSizeFunc:  'outerHeight', cssAttr: 'top', display: 'block'};\n        else\n            orientData = {outerSizeFunc:  'outerWidth', cssAttr: 'left', display: 'inline-block'};\n       \n        // Apply display type of list items.\n        $('li',$list).css({display: orientData.display});\n        \n        // Function to bind events to buttons.\n        var bindButEvents = function($elem,dir) {\n            $elem.bind('mousedown mouseup touchend touchstart',function(evt) {\n                if (evt.type==='mouseup' || evt.type==='touchend') moveDir = 0;\n                else moveDir = dir;\n                return false;\n            });\n        };\n        \n        // Bind the events.\n        bindButEvents(settings.$bwdBut,1);\n        bindButEvents(settings.$fwdBut,-1);\n        \n        // Store ref to outerWidth() or outerHeight() function.\n        outerFunc = orientData.outerSizeFunc; \n   \n        // Function to animate. Moves the list element inside the container.\n        // Does various bounds checks.\n        var animate = function() {\n            var minPos;\n            \n            // If no movement or resize for 100 cycles, then go into 'idle' mode to save CPU.\n            if (!moveDir && pos === destPos && listDimension === $container[outerFunc]() ) {  \n                idle++;\n                if (idle>100) return;\n            }else {\n                 // Make a note of current size for idle comparison next cycle.\n                listDimension = $container[outerFunc]();\n                idle = 0;\n            }\n          \n            // Update destination pos.\n            destPos += settings.maxSpeed * moveDir;\n     \n            // Work out minimum scroll position.\n            // This will also cause the thumbs to drag back out again when increasing container size.\n            minPos = listDimension - $list[outerFunc]();\n            \n          \n            // Minimum pos should always be <= 0;\n            if (minPos > 0) minPos = 0;\n            // Bounds check (maximum advance i.e list moving left/up)\n            if (destPos < minPos) destPos = minPos;\n            // Bounds check (maximum retreat i.e list moving right/down)\n            if (destPos>0) destPos = 0;\n            \n            // Disable/enable buttons depending min/max extents.\n            if (destPos === minPos) settings.$fwdBut.addClass('disabled');\n            else settings.$fwdBut.removeClass('disabled');\n            if (destPos === 0) settings.$bwdBut.addClass('disabled');\n            else settings.$bwdBut.removeClass('disabled');\n            \n            // Animate towards destination with a simple easing calculation.\n            pos += (destPos - pos) / settings.easing;\n            \n            // If within 1000th of a pixel to dest, then just 'snap' to exact value.\n            // Do this so pos will end up exactly == destPos (deals with rounding errors).\n            if (Math.abs(destPos-pos)<0.001) pos = destPos;\n            \n            $list.css(orientData.cssAttr, Math.floor(pos));\n        };\n        \n        setInterval(function(){\n            animate();\n        },1000/60);\n    };\n    \n    $.fn.Thumbelina.defaults = {\n        orientation:    \"horizontal\",   // Orientation mode, horizontal or vertical.\n        easing:         8,              // Amount of easing (min 1) larger = more drift.\n        maxSpeed:       5,              // Max speed of movement (pixels per cycle).\n        $bwdBut:   null,                // jQuery element used as backward button.\n        $fwdBut:    null                // jQuery element used as forward button.\n    };\n    \n})(jQuery);\n\n"],"names":[],"version":3,"file":"product_info_blue.335d90eb.js.map","sourceRoot":"/__parcel_source_root/"}